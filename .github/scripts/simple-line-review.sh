#!/bin/bash

# 간단한 라인별 코드 리뷰 스크립트 (jq 의존성 없음)
# GitHub API를 사용하여 PR에 라인별 코멘트 추가

set -e

# 설정
PR_NUMBER="${1:-}"
if [ -z "$PR_NUMBER" ]; then
    echo "❌ 사용법: $0 <PR_NUMBER>"
    echo "예시: $0 3"
    exit 1
fi

echo "🔍 PR #$PR_NUMBER 분석 중..."

# 변경된 파일 목록 가져오기 (간단한 방법)
echo "📋 변경된 파일 분석 중..."
FILES=$(gh pr view "$PR_NUMBER" --json files --template '{{range .files}}{{.path}}{{"\n"}}{{end}}')

if [ -z "$FILES" ]; then
    echo "❌ 변경된 파일이 없습니다."
    exit 1
fi

echo "변경된 파일들:"
echo "$FILES" | sed 's/^/  - /'

# 각 파일별로 분석 및 코멘트 추가
found_issues=false

for file in $FILES; do
    echo ""
    echo "📄 분석 중: $file"
    
    if [ ! -f "$file" ]; then
        echo "  ⚠️ 파일이 존재하지 않음 (삭제된 파일)"
        continue
    fi
    
    # 파일 확장자 확인
    extension="${file##*.}"
    line_number=1
    comment_added=false
    
    case "$extension" in
        kt|java)
            echo "  🔍 Kotlin/Java 파일 검사 중..."
            
            # 하드코딩된 API 키 검색
            if grep -n "apiKey.*=.*\".*\"" "$file" > /dev/null; then
                line_num=$(grep -n "apiKey.*=.*\".*\"" "$file" | head -1 | cut -d: -f1)
                echo "    🔒 라인 $line_num: 하드코딩된 API 키 발견"
                
                # 단일 코멘트로 추가
                gh pr comment "$PR_NUMBER" --body "$(cat <<-EOF
## 🔒 보안 이슈 - $file:$line_num

**하드코딩된 API 키가 발견되었습니다.**

\`\`\`
$(sed -n "${line_num}p" "$file")
\`\`\`

**권장 수정사항:**
\`\`\`kotlin
// 환경 변수 사용
private val apiKey = System.getenv("API_KEY") ?: throw IllegalStateException("API_KEY not set")
\`\`\`

🤖 Generated by [Claude Code](https://claude.ai/code)
EOF
                )"
                found_issues=true
                comment_added=true
            fi
            
            # SQL 인젝션 취약점 검색
            if grep -n "SELECT.*WHERE.*\\\$" "$file" > /dev/null && [ "$comment_added" = false ]; then
                line_num=$(grep -n "SELECT.*WHERE.*\\\$" "$file" | head -1 | cut -d: -f1)
                echo "    ⚠️ 라인 $line_num: SQL 인젝션 위험"
                
                gh pr comment "$PR_NUMBER" --body "$(cat <<-EOF
## ⚠️ 보안 취약점 - $file:$line_num

**SQL 인젝션 가능성이 있습니다.**

\`\`\`
$(sed -n "${line_num}p" "$file")
\`\`\`

**권장 수정사항:**
\`\`\`kotlin
// PreparedStatement 사용
val query = "SELECT * FROM users WHERE id = ?"
val preparedStatement = connection.prepareStatement(query)
preparedStatement.setString(1, id)
\`\`\`

🤖 Generated by [Claude Code](https://claude.ai/code)
EOF
                )"
                found_issues=true
                comment_added=true
            fi
            
            # 입력 검증 누락
            if grep -n "@RequestBody.*String" "$file" > /dev/null && [ "$comment_added" = false ]; then
                line_num=$(grep -n "@RequestBody.*String" "$file" | head -1 | cut -d: -f1)
                echo "    💡 라인 $line_num: 입력 검증 개선 권장"
                
                gh pr comment "$PR_NUMBER" --body "$(cat <<-EOF
## 💡 개선 제안 - $file:$line_num

**입력 검증을 추가하면 좋겠습니다.**

\`\`\`
$(sed -n "${line_num}p" "$file")
\`\`\`

**권장 수정사항:**
\`\`\`kotlin
// DTO 클래스와 검증 어노테이션 사용
@PostMapping
fun createUser(@Valid @RequestBody userData: UserDto): ResponseEntity<String> {
    // 처리 로직
}
\`\`\`

🤖 Generated by [Claude Code](https://claude.ai/code)
EOF
                )"
                found_issues=true
                comment_added=true
            fi
            ;;
            
        md)
            echo "  📝 Markdown 파일 검사 중..."
            
            # TODO 항목 확인
            if grep -n "TODO\|FIXME" "$file" > /dev/null; then
                line_num=$(grep -n "TODO\|FIXME" "$file" | head -1 | cut -d: -f1)
                echo "    📝 라인 $line_num: TODO 항목 발견"
                
                gh pr comment "$PR_NUMBER" --body "$(cat <<-EOF
## 📝 알림 - $file:$line_num

**TODO 항목이 발견되었습니다.**

\`\`\`
$(sed -n "${line_num}p" "$file")
\`\`\`

완료 후 체크리스트를 업데이트해주세요.

🤖 Generated by [Claude Code](https://claude.ai/code)
EOF
                )"
                found_issues=true
                comment_added=true
            fi
            ;;
            
        yml|yaml)
            echo "  ⚙️ YAML 파일 검사 중..."
            
            # 시크릿 설정 확인 (긍정적 피드백)
            if grep -n "ANTHROPIC_API_KEY\|secrets\." "$file" > /dev/null; then
                line_num=$(grep -n "ANTHROPIC_API_KEY\|secrets\." "$file" | head -1 | cut -d: -f1)
                echo "    ✅ 라인 $line_num: 좋은 시크릿 관리"
                
                gh pr comment "$PR_NUMBER" --body "$(cat <<-EOF
## ✅ Good Practice - $file:$line_num

**시크릿 관리가 적절히 구성되어 있습니다!**

\`\`\`
$(sed -n "${line_num}p" "$file")
\`\`\`

GitHub Secrets를 통한 안전한 관리가 확인됩니다.

🤖 Generated by [Claude Code](https://claude.ai/code)
EOF
                )"
                found_issues=true
                comment_added=true
            fi
            ;;
    esac
    
    if [ "$comment_added" = false ]; then
        echo "    ✅ 이슈 발견되지 않음"
    fi
done

# 전체 요약 리뷰 추가
if [ "$found_issues" = true ]; then
    echo ""
    echo "📝 전체 요약 리뷰 추가 중..."
    
    gh pr review "$PR_NUMBER" --comment --body "$(cat <<-EOF
## 🤖 자동 라인별 코드 리뷰 완료

### 📊 분석 결과
- 변경된 파일 수: $(echo "$FILES" | wc -l | tr -d ' ')개
- 발견된 이슈: 상세 코멘트에서 확인
- 분석 완료 시간: $(date '+%Y-%m-%d %H:%M:%S')

### 🔍 검토된 항목
- 🔒 보안 취약점 (API 키, SQL 인젝션)
- ⚡ 성능 및 코드 품질
- 📝 문서화 및 TODO 항목
- ⚙️ 설정 파일 보안

### 📋 다음 단계
1. 각 라인별 코멘트 확인
2. 보안 이슈 우선 수정
3. 개선 제안 검토 및 적용

---
🤖 Generated by [Claude Code](https://claude.ai/code)
EOF
    )"
else
    echo ""
    echo "✅ 자동 분석 완료 - 특별한 이슈 없음"
    
    gh pr review "$PR_NUMBER" --comment --body "$(cat <<-EOF
## 🤖 자동 코드 리뷰 완료

### ✅ 분석 결과
- 변경된 파일 수: $(echo "$FILES" | wc -l | tr -d ' ')개
- 자동 검사에서 특별한 이슈가 발견되지 않았습니다
- 코드 품질이 양호합니다

### 📋 검토된 항목
- 🔒 보안 취약점: 발견되지 않음
- ⚡ 성능 이슈: 발견되지 않음  
- 📝 코드 스타일: 양호

---
🤖 Generated by [Claude Code](https://claude.ai/code)
EOF
    )"
fi

echo ""
echo "🎉 라인별 자동 리뷰 프로세스 완료!"
echo "📋 PR 페이지에서 상세 코멘트를 확인하세요: https://github.com/$(gh repo view --json owner,name --template '{{.owner.login}}/{{.name}}')/pull/$PR_NUMBER"