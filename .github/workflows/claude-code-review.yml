name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize, reopened]
    branches: [main, develop]
  
  # 수동 실행도 가능하게
  workflow_dispatch:

jobs:
  claude-review:
    runs-on: ubuntu-latest
    name: Automated Code Review with Claude
    
    steps:
    - name: Checkout Code
      uses: actions/checkout@v4
      with:
        # PR의 전체 히스토리를 가져오기 위해 필요
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Claude Code CLI
      run: |
        npm install -g @anthropic-ai/claude-code
        
    - name: Setup Claude Authentication
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "API 키 설정 완료"
        
    - name: Run Claude Code Review
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "🔍 Starting Claude Code Review..."
        
        # PR 리뷰 실행
        claude review-pr > claude-review-output.txt 2>&1 || echo "Review completed with warnings"
        
        # 보안 검사 실행  
        claude check-security > claude-security-output.txt 2>&1 || echo "Security check completed"
        
        # 코드 분석 실행
        claude analyze-code > claude-analysis-output.txt 2>&1 || echo "Code analysis completed"
        
    - name: Upload Review Results
      uses: actions/upload-artifact@v4
      with:
        name: claude-review-results
        path: |
          claude-review-output.txt
          claude-security-output.txt
          claude-analysis-output.txt
        retention-days: 30
        
    - name: Comment PR with Review Results
      if: github.event_name == 'pull_request'
      uses: actions/github-script@v7
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      with:
        script: |
          const fs = require('fs');
          
          try {
            // 파일 읽기
            const reviewOutput = fs.existsSync('claude-review-output.txt') 
              ? fs.readFileSync('claude-review-output.txt', 'utf8') 
              : 'Review output not available';
              
            const securityOutput = fs.existsSync('claude-security-output.txt') 
              ? fs.readFileSync('claude-security-output.txt', 'utf8') 
              : 'Security check output not available';
            
            // PR 댓글 생성
            const comment = `## 🤖 Claude Code Review Results
            
            ### 📊 PR Review
            \`\`\`
            ${reviewOutput.slice(0, 2000)}${reviewOutput.length > 2000 ? '\n... (truncated)' : ''}
            \`\`\`
            
            ### 🛡️ Security Analysis  
            \`\`\`
            ${securityOutput.slice(0, 2000)}${securityOutput.length > 2000 ? '\n... (truncated)' : ''}
            \`\`\`
            
            ### 📋 Summary
            - 🔍 **PR Review**: ${reviewOutput.includes('🚨') ? '❌ Issues Found' : '✅ Looks Good'}
            - 🛡️ **Security**: ${securityOutput.includes('Critical') ? '❌ Vulnerabilities' : '✅ No Issues'}
            
            > 💡 **전체 결과는 [Artifacts](../actions)에서 확인할 수 있습니다.**
            
            ---
            *Powered by Claude Code & DDD+Hexagonal Architecture Rules*`;
            
            // PR에 댓글 추가
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.error('Error creating PR comment:', error);
            
            // 에러 발생 시 간단한 댓글
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `## 🤖 Claude Code Review
              
              ❌ 리뷰 실행 중 오류가 발생했습니다. [Actions 로그](../actions)를 확인해주세요.
              
              Error: \`${error.message}\``
            });
          }
