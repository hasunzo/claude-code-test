name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  claude-review:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Claude Code
      run: npm install -g @anthropic-ai/claude-code
        
    - name: Run Claude Review
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        CLAUDE_LANGUAGE: ko-KR
      run: |
        echo "🔍 Starting Claude Code Review..."
        
        if [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "❌ ANTHROPIC_API_KEY가 설정되지 않았습니다."
          echo "API key not set" > review.txt
        else
          echo "✅ API 키가 설정되었습니다."
          
          # .claude 명령어 규칙 읽기
          if [ -f ".claude/commands/review-pr.md" ]; then
            echo "📋 .claude 명령어 규칙 발견, 한국어 리뷰 모드로 실행"
            echo "다음 파일들을 DDD+Hexagonal Architecture 기준으로 한국어로 리뷰해주세요:" > prompt.txt
            echo "" >> prompt.txt
            cat .claude/commands/review-pr.md >> prompt.txt
            echo "" >> prompt.txt
            echo "=== 변경된 파일들 ===" >> prompt.txt
            git diff --name-only HEAD~1 >> prompt.txt
            echo "" >> prompt.txt
            echo "=== 변경 내용 ===" >> prompt.txt
            git diff HEAD~1 >> prompt.txt
            
            claude --prompt-file prompt.txt > review.txt 2>&1 || echo "Review completed with status: $?"
          else
            echo "실행중: claude review-pr (한국어 모드)"
            claude review-pr --output-language korean > review.txt 2>&1 || echo "Review completed with status: $?"
          fi
          
          echo "=== Review Output ==="
          cat review.txt
        fi
        
    - name: Create PR Comment
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          try {
            const reviewContent = fs.readFileSync('review.txt', 'utf8');
            
            // API 키/크레딧 문제 체크
            const hasApiIssue = reviewContent.includes('API key not set') ||
                               reviewContent.includes('authentication failed') ||
                               reviewContent.includes('insufficient credits') ||
                               reviewContent.length < 50; // 너무 짧은 응답은 에러로 간주
                               
            if (hasApiIssue) {
              const comment = `## 🤖 Claude Code Review
          
          ❌ **API 키 또는 크레딧 문제**
          
          \`\`\`
          ${reviewContent.substring(0, 300)}
          \`\`\`
          
          **해결 방법:**
          1. **API 키 설정**: Repository → Settings → Secrets → Actions
          2. **크레딧 확인**: [console.anthropic.com](https://console.anthropic.com)에서 잔액 확인  
          3. **테스트**: 설정 후 PR 재실행
          
          ---
          *Powered by Claude Code*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              return;
            }
            
            // 실제 리뷰 내용 파싱
            const lines = reviewContent.split('\n');
            const criticalIssues = reviewContent.match(/❌.*|BLOCKING.*|CRITICAL.*|HIGH RISK/gi) || [];
            const securityIssues = reviewContent.match(/Hard-coded.*|SQL injection.*|security.*vulnerability/gi) || [];
            
            // 리뷰 내용 요약 추출
            let summary = '';
            let recommendations = '';
            let securityRating = '';
            
            // Summary 섹션 추출
            const summaryMatch = reviewContent.match(/### 📋 Summary of Changes([\s\S]*?)###/);
            if (summaryMatch) {
              summary = summaryMatch[1].trim().substring(0, 400) + '...';
            }
            
            // Security Rating 추출  
            const ratingMatch = reviewContent.match(/Security Rating: (.+)/);
            if (ratingMatch) {
              securityRating = ratingMatch[1];
            }
            
            // 주요 이슈들 추출
            const criticalSection = reviewContent.match(/🚨.*Critical.*|❌.*BLOCKING.*|Critical Security Concerns([\s\S]*?)(?=###|$)/i);
            let mainIssues = '';
            if (criticalSection) {
              mainIssues = criticalSection[0].substring(0, 600) + '...';
            }
            
            // 전체 리뷰가 너무 길면 축약
            let fullReview = reviewContent;
            if (reviewContent.length > 1500) {
              fullReview = reviewContent.substring(0, 1500) + '\n\n... (전체 내용은 Actions 로그에서 확인)';
            }
            
            const comment = `## 🤖 Claude Code Review
          
          ### 📊 분석 결과
          - **심각한 이슈**: ${criticalIssues.length}개 발견
          - **보안 문제**: ${securityIssues.length}개 발견
          - **보안 등급**: ${securityRating || '평가 중'}
          
          ### 🔍 상세 리뷰 결과
          
          <details>
          <summary><strong>📋 전체 리뷰 내용 보기</strong></summary>
          
          \`\`\`
          ${fullReview}
          \`\`\`
          
          </details>
          
          ${mainIssues ? `### 🚨 주요 발견사항\n${mainIssues}` : ''}
          
          ### 📋 다음 단계
          1. **상세 결과**: [GitHub Actions 로그](../../../actions) 확인
          2. **보안 이슈**: 즉시 수정 필요
          3. **코드 리뷰**: 팀 검토 후 머지 결정
          
          ---
          *Auto-generated by Claude Code Review*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.error('Error creating comment:', error);
            
            // 에러 발생 시 원본 리뷰 내용이라도 보여주기
            let fallbackContent = 'Failed to read review content';
            try {
              fallbackContent = fs.readFileSync('review.txt', 'utf8').substring(0, 1000);
            } catch (e) {
              fallbackContent = 'Review file not found';
            }
            
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,  
              repo: context.repo.repo,
              body: `## 🤖 Claude Code Review
          
          ⚠️ **댓글 생성 중 오류 발생**
          
          **Error**: ${error.message}
          
          **Raw Review Content**:
          \`\`\`
          ${fallbackContent}
          \`\`\`
          
          [전체 로그 확인](../../../actions)
          
          ---
          *Claude Code Review*`
            });
          }
