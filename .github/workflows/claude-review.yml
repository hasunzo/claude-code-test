name: Claude Code Review

on:
  pull_request:
    types: [opened, synchronize]
    branches: [main]

permissions:
  contents: read
  issues: write
  pull-requests: write

jobs:
  claude-review:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout
      uses: actions/checkout@v4
      with:
        fetch-depth: 0
        
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        
    - name: Install Claude Code
      run: npm install -g @anthropic-ai/claude-code
        
    - name: Run Claude Review
      env:
        ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
      run: |
        echo "🔍 Starting Claude Code Review..."
        
        if [ -z "$ANTHROPIC_API_KEY" ]; then
          echo "❌ ANTHROPIC_API_KEY가 설정되지 않았습니다."
          echo "API key not set" > review.txt
        else
          echo "✅ API 키가 설정되었습니다."
          
          echo "실행중: claude review-pr"
          claude review-pr > review.txt 2>&1 || echo "Review completed with status: $?"
          
          echo "=== Review Output ==="
          cat review.txt
        fi
        
    - name: Create PR Comment
      if: always()
      uses: actions/github-script@v7
      with:
        github-token: ${{ secrets.GITHUB_TOKEN }}
        script: |
          const fs = require('fs');
          
          try {
            const reviewContent = fs.readFileSync('review.txt', 'utf8');
            
            // API 키/크레딧 문제 체크
            const hasApiIssue = reviewContent.includes('API key not set') ||
                               reviewContent.includes('invalid') ||
                               (reviewContent.includes('credit') && reviewContent.includes('low'));
                               
            if (hasApiIssue) {
              const comment = `## 🤖 Claude Code Review
          
          ❌ **API 키 또는 크레딧 문제**
          
          현재 상태: \`${reviewContent.split('\n')[0]}\`
          
          해결 방법:
          1. **API 키 설정**: Repository → Settings → Secrets → Actions
          2. **크레딧 확인**: console.anthropic.com에서 잔액 확인  
          3. **테스트**: 설정 후 PR 재실행
          
          ---
          *Powered by Claude Code*`;

              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
              return;
            }
            
            // 정상 리뷰 결과
            const criticalCount = (reviewContent.match(/🔴|CRITICAL/g) || []).length;
            
            const comment = `## 🤖 Claude Code Review
          
          ### 📊 분석 완료  
          - **보안 취약점**: ${criticalCount}개 발견
          - **상세 결과**: [Actions 로그](../../actions) 확인
          
          ### 🚨 주요 발견사항
          ${reviewContent.includes('🔴 CRITICAL') ? 
            (reviewContent.split('🔴 CRITICAL')[1] || '').substring(0, 500) + '...' : 
            '세부 내용은 Actions 로그에서 확인하세요'}
          
          ### 🛡️ 권장사항
          1. 하드코딩된 크리덴셜 즉시 제거
          2. SQL 인젝션 취약점 수정  
          3. 입력 검증 로직 추가
          
          ---
          *Powered by Claude Code*`;

            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });
            
          } catch (error) {
            console.error('Error creating comment:', error);
            
            // 최소한의 댓글이라도 달기
            await github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,  
              repo: context.repo.repo,
              body: `## 🤖 Claude Code Review
          
          ✅ **리뷰 완료**
          
          상세 결과는 [Actions 로그](../../actions)에서 확인하세요.
          
          Error: ${error.message}`
            });
          }
